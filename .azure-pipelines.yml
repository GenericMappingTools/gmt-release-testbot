# Configuration for Azure Pipelines
################################################################################

# Only build the master branch, tags and PRs (on by default) to avoid building
# random branches in the repository until a PR is opened
trigger:
  branches:
    include:
    - master
    - refs/tags/*

variables:
  # global variables to enable/disable jobs
  TEST_BUNDLE   : true
  TEST_HOMEBREW : false
  TEST_MACPORTS : false
  TEST_CONDA    : false
  TEST_FEDORA   : false
  TEST_CENTOS   : false
  TEST_WINDOWS  : false
  # other global variables
  # disable auto-display of figures
  GMT_END_SHOW  : off


jobs:

# macOS Bundle
################################################################################
- job:
  displayName: 'Bundle'
  condition: eq(variables['TEST_BUNDLE'], true)

  strategy:
    matrix:
      macOS1014:
        imageName: 'macOS-10.14'
      macOS1015:
        imageName: 'macOS-10.15'
  pool:
    vmImage: $(imageName)

  variables:
    GMT_BUNDLE_URL: ftp://ftp.soest.hawaii.edu/pwessel/release/gmt-6.1.0-darwin-x86_64.dmg

  steps:
  - bash: sw_vers -productVersion
    displayName: Check macOS version

  - bash: bash install-gmt-via-bundle.sh
    displayName: Install GMT Bundle

  - bash: |
      echo "##vso[task.setvariable variable=GMTHOME]/Applications/GMT.app/Contents/Resources"
      echo "##vso[task.setvariable variable=PROJ_LIB]$GMTHOME/share/proj6"
      echo "##vso[task.setvariable variable=MAGICK_CONFIGURE_PATH]$GMTHOME/lib/GraphicsMagick-1.3.33/config"
    displayName: Set enviromental variables

  - bash: echo "##vso[task.prependpath]$GMTHOME/bin"
    displayName: Set PATH

  - bash: bash test-gmt.sh
    displayName: Run tests

# macOS Homebrew
################################################################################
- job:
  displayName: 'Homebrew'
  condition: eq(variables['TEST_HOMEBREW'], true)

  strategy:
    matrix:
      macOS1014:
        imageName: 'macOS-10.14'
      macOS1015:
        imageName: 'macOS-10.15'
  pool:
    vmImage: $(imageName)

  steps:
  - bash: sw_vers -productVersion
    displayName: Check macOS version

  - bash: bash install-gmt-via-homebrew.sh
    displayName: Install GMT via Homebrew

  - bash: bash test-gmt.sh
    displayName: Run tests

# macOS Macports
################################################################################
- job:
  displayName: 'Macports'
  condition: eq(variables['TEST_MACPORTS'], true)

  strategy:
    matrix:
      macOS1014:
        imageName: 'macOS-10.14'
      macOS1015:
        imageName: 'macOS-10.15'
  pool:
    vmImage: $(imageName)

  steps:
  - bash: sw_vers -productVersion
    displayName: Check macOS version

  - bash: bash install-gmt-via-macports.sh
    displayName: Install GMT via Macports

  - bash: echo "##vso[task.prependpath]/opt/local/bin"
    displayName: Set PATH

  - bash: bash test-gmt.sh
    displayName: Run tests

# conda
################################################################################
- job:
  displayName: 'Conda'
  condition: eq(variables['TEST_CONDA'], true)

  strategy:
    matrix:
      Linux:
        imageName: 'ubuntu-18.04'
      macOS:
        imageName: 'macOS-10.15'
      Windows:
        imageName: 'windows-2019'

  pool:
    vmImage: $(imageName)

  steps:
  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - powershell: |
      Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory.
  # We need to take ownership if we want to update conda or install packages globally
  # See https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda?view=azure-devops&tabs=macos#add-conda-to-your-system-path
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
    condition: eq(variables['Agent.OS'], 'Darwin')

  - bash: conda create --yes --quiet --name gmt --channel conda-forge gmt
    displayName: Create Anaconda environment

  - bash: |
      source activate gmt
      bash test-gmt.sh
    displayName: Run tests

  - script: |
      call activate gmt
      call test-gmt.bat
    displayName: Run Batch tests
    condition: eq(variables['Agent.OS'], 'Windows_NT')

# Fedora
################################################################################
- job:
  displayName: 'Fedora'
  condition: eq(variables['TEST_FEDORA'], true)

  strategy:
    matrix:
      v30:
        docker_image: 'fedora:30'
      v31:
        docker_image: 'fedora:31'
      v32:
        docker_image: 'fedora:32'
      rawhide:
        docker_image: 'fedora:rawhide'

  steps:
  - bash: |
      docker run -e GMT_END_SHOW -v `pwd`:`pwd` -w `pwd` --rm $(docker_image) /bin/bash -c '
        dnf -yq install dnf-plugins-core
        dnf -yq copr enable genericmappingtools/gmt
        dnf -yq install gmt
        dnf -yq install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
        dnf -yq install GraphicsMagick ffmpeg gdal
        bash test-gmt.sh
      '
    displayName: Run docker

# CentOS
################################################################################
- job:
  displayName: 'CentOS'
  condition: eq(variables['TEST_CENTOS'], true)

  strategy:
    matrix:
      v6:
        docker_image: 'centos:6'
      v7:
        docker_image: 'centos:7'
      v8:
        docker_image: 'centos:8'

  steps:
  - bash: |
      docker run -e GMT_END_SHOW -v `pwd`:`pwd` -w `pwd` --rm $(docker_image) /bin/bash -c '
        yum -yq install epel-release

        version=$(rpm -E %rhel)
        if [ "${version}" == "6" ]; then
            curl https://copr.fedorainfracloud.org/coprs/genericmappingtools/gmt/repo/epel-6/genericmappingtools-gmt-epel-6.repo -o /etc/yum.repos.d/genericmappingtools-gmt-epel-6.repo
        else
            yum -yq install yum-plugin-copr
            yum -yq copr enable genericmappingtools/gmt
        fi

        # See https://github.com/GenericMappingTools/gmt/issues/3433
        if [ "${version}" == "8" ]; then
            yum config-manager --set-enabled PowerTools
        fi

        yum -yq install gmt
        yum -yq localinstall --nogpgcheck https://download1.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm
        yum -yq install GraphicsMagick ffmpeg gdal
        bash test-gmt.sh
      '
    displayName: Run docker

# Windows installer
################################################################################
- job:
  displayName: 'Windows'
  condition: eq(variables['TEST_WINDOWS'], true)

  pool:
    vmImage: 'windows-2019'

  strategy:
    matrix:
      x86:
        arch: 'win32'
      x64:
        arch: 'win64'

  variables:
    GMT_INSTALLER_URL: http://mirrors.ustc.edu.cn/gmt/bin/gmt-6.0.0-$(ARCH).exe

  steps:
  - bash: bash install-gmt-windows.sh
    displayName: Install GMT via installers

  - powershell: |
      Write-Host "##vso[task.prependpath]C:\programs\gmt6\bin"
      Write-Host "##vso[task.prependpath]C:\Program Files\GraphicsMagick-1.3.32-Q8"
    displayName: Set PATH

  - bash: bash test-gmt.sh
    displayName: Run tests

  - script: call test-gmt.bat
    displayName: Run Batch tests
